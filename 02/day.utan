let utils = use("../utils/utils.utan")
let itertools = use("../utils/itertools.utan")

let each = itertools.each
let while_ = itertools.while_
let isNull = utils.isNull

let testInput = "7 6 4 2 1
1 2 7 8 9
9 7 6 2 1
1 3 2 4 5
8 6 4 4 1
1 3 6 7 9";

let input = utils.chooseInput(true)

let parse = fn(input) {
    let records = split(input, "
")
    let arrTwoD = map(records, fn (record) {
        map(split(record, " "), fn(level) {
            int(level)
        })
    })
    // puts(arrTwoD);
    arrTwoD
}

let isIncreasingSafely = fn(a, b) {
    a < b && b - a < 4
}

let isDecreasingSafely = fn(a, b) {
    a > b && a - b < 4
}

let partOne = fn(input) {
    let data = parse(input)
    // each(data, 0, puts)
    // let levels = data[0]
    // each(levels, 0, puts)
    
    let ok = true;
    let f = fn(levels) {
        let i = 0
        let chosenDirectionFn = if (levels[0] < levels[1]) {
            isIncreasingSafely
        } else {
            isDecreasingSafely
        }
        while_(fn() {i < len(levels) - 1}, fn() {
            ok = true
            // puts("i:", i, "levels[i]:", levels[i] , "levels[i+1]:", levels[i+1], "!chosenDirectionFn(levels[i], levels[i+1]", !chosenDirectionFn(levels[i], levels[i+1]))
            if (!chosenDirectionFn(levels[i], levels[i+1])) {
                ok = false;
                // puts("oks:", ok);
                // Hack to exit the entire while loop
                i = len(levels)
            }
            
            i = i + 1
        })
        // puts("ok:", ok)
        return ok
    }
    let ans = len(filter(data, f))
    puts("Answer to part one:", ans)
}



partOne()