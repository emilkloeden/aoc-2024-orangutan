let lib = use("./lib.utan")
let utils = use("../utils/utils.utan")
let itertools = use("../utils/itertools.utan")

let while_ = itertools.while_
let any = itertools.any

let parse = lib.parse

let testInput = "7 6 4 2 1
1 2 7 8 9
9 7 6 2 1
1 3 2 4 5
8 6 4 4 1
1 3 6 7 9";

let input = utils.chooseInput(true)



let partOne = fn(input) {
    let data = parse(input)
    let safe = filter(data, fn(levels) {lib.isRecordSafe(levels, true)})
    let ans = len(safe)
    puts("Answer to part one:", ans)
}

partOne()


let partTwo = fn(input) {
    // For this part we know all the safe records are safe
    // So we just need to test the unsafe records and add
    // the count of "newly" safe records to the known count
    // This saves testing 663 records
    // Which is good because this implementation is pretty slow
    // get all permutations of each record save one level each
    // then if any are safe, add that to our count.
    
    let data = parse(input)
    
    let unsafe = filter(data, fn(levels) {!lib.isRecordSafe(levels, true)})
    let ans = len(data) - len(unsafe)
    
    let i = 0
    while_(fn() {i < len(unsafe)}, fn() {
        let ps = lib.permutations(unsafe[i])
        if (any(ps, fn(p) {lib.isRecordSafe(p, true)})) {
            ans = ans + 1
        }
        i = i + 1
    })
    puts("Answer to part two:", ans)

}

partTwo()